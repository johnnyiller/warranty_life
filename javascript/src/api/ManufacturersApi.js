/**
 * Warranty Life API
 * Warranty life Api
 *
 * OpenAPI spec version: 1.0.9
 * Contact: jeff.durand@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse403', 'model/Manufacturer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse403'), require('../model/Manufacturer'));
  } else {
    // Browser globals (root is window)
    if (!root.WarrantyLifeApi) {
      root.WarrantyLifeApi = {};
    }
    root.WarrantyLifeApi.ManufacturersApi = factory(root.WarrantyLifeApi.ApiClient, root.WarrantyLifeApi.InlineResponse403, root.WarrantyLifeApi.Manufacturer);
  }
}(this, function(ApiClient, InlineResponse403, Manufacturer) {
  'use strict';

  /**
   * Manufacturers service.
   * @module api/ManufacturersApi
   * @version 1.0.9
   */

  /**
   * Constructs a new ManufacturersApi. 
   * @alias module:api/ManufacturersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the manufacturersGet operation.
     * @callback module:api/ManufacturersApi~manufacturersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Manufacturer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get list of manufacturers
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.startAt 
     * @param {Number} opts.limit 
     * @param {module:api/ManufacturersApi~manufacturersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Manufacturer>}
     */
    this.manufacturersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'startAt': opts['startAt'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Manufacturer];

      return this.apiClient.callApi(
        '/manufacturers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manufacturersManufacturerIdGet operation.
     * @callback module:api/ManufacturersApi~manufacturersManufacturerIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * specific manufacturer from warranty life id
     * @param {String} manufacturerId Id for the manufacterer
     * @param {module:api/ManufacturersApi~manufacturersManufacturerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    this.manufacturersManufacturerIdGet = function(manufacturerId, callback) {
      var postBody = null;

      // verify the required parameter 'manufacturerId' is set
      if (manufacturerId === undefined || manufacturerId === null) {
        throw new Error("Missing the required parameter 'manufacturerId' when calling manufacturersManufacturerIdGet");
      }


      var pathParams = {
        'manufacturerId': manufacturerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Manufacturer;

      return this.apiClient.callApi(
        '/manufacturers/{manufacturerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manufacturersPost operation.
     * @callback module:api/ManufacturersApi~manufacturersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Manufacturer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create new manufacturer
     * @param {module:model/Manufacturer} manufacturer 
     * @param {module:api/ManufacturersApi~manufacturersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Manufacturer}
     */
    this.manufacturersPost = function(manufacturer, callback) {
      var postBody = manufacturer;

      // verify the required parameter 'manufacturer' is set
      if (manufacturer === undefined || manufacturer === null) {
        throw new Error("Missing the required parameter 'manufacturer' when calling manufacturersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Manufacturer;

      return this.apiClient.callApi(
        '/manufacturers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
